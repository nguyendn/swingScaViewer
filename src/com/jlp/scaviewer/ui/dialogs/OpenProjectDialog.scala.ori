/*Copyright 2012 Jean-Louis PASTUREL 
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*  limitations under the License.
*/
package com.jlp.scaviewer.ui.dialogs
import scala.swing.Dialog
import scala.swing.GridBagPanel
import java.awt.Dimension
import java.awt.Insets
import scala.swing.Label
import java.awt.Font
import java.awt.GridBagConstraints
import java.awt.Point
import java.io.File
import java.io.FileFilter
import scala.collection._
import scala.swing.ComboBox
import scala.swing.Window
import scala.swing.TextField
import scala.swing.Button
import scala.swing.event.ActionEvent
import com.jlp.scaviewer.ui.SwingScaViewer
import scala.swing.MainFrame
import scala.swing.event.MouseClicked
import scala.swing.event.SelectionChanged
import scala.swing.event.ListSelectionChanged
import scala.swing.event.ValueChanged
import com.jlp.scaviewer.commons.utils.CopyFile
import com.jlp.scaviewer.commons.utils.SearchDirFile
import java.util.Properties
import java.io.FileInputStream
import java.text.SimpleDateFormat
import java.io.FileOutputStream
import java.util.Date
import java.util.Calendar
import java.awt.event.MouseAdapter
import java.awt.event.MouseEvent

class OpenProjectDialog(win: MainFrame) extends Dialog(win) {
  val gbp = new GridBagPanel
  val regDate = """\d{4}/\d\d/\d\d \d\d:\d\d:\d\d""".r
  val font1 = new Font("Arial", Font.BOLD, 14)
  val font2 = new Font("Arial", Font.BOLD, 16)
  modal = true
  this.preferredSize = new Dimension(500, 300)
  this.maximumSize = new Dimension(700, 400)
  var gbc = new gbp.Constraints()
  var insets1 = new Insets(10, 10, 10, 10)
  gbc.insets = insets1
  // titre du dialog
  val ltitle = new Label("Opening an existing project")
  ltitle.font = new java.awt.Font("Arial", Font.BOLD, 16)
  gbc.gridx = 0
  gbc.gridy = 0
  gbc.weightx = 1.0
  gbc.gridwidth = 2
  gbc.gridwidth = GridBagConstraints.REMAINDER
  gbc.fill = GridBagPanel.Fill.Horizontal
  gbc.anchor = GridBagPanel.Anchor.Center
  gbp.layout += ((ltitle -> gbc))

  //Liste des projets existants
  gbc.gridwidth = 1
  gbc.gridx = 0
  gbc.gridy = 1

  val pEx = new Label("Existing Project")
  gbp.layout += ((pEx -> gbc))

  var listProjets = List(new File(System.getProperty("workspace")).listFiles(new FileFilter { def accept(file: File) = { file.isDirectory } }): _*) map { _.getName() }
  gbc.gridx = 1
  gbc.gridy = 1
  val cbxEx = new ComboBox(listProjets)
  gbp.layout += ((cbxEx -> gbc))
  // val cbPEx=new 

  // Saisie du nouveau projet et creation de l'arborescence
  gbc.gridx = 0
  gbc.gridy = 2
  val pNew = new Label("Selected Project")
  gbp.layout += ((pNew -> gbc))

  gbc.gridx = 1
  gbc.gridy = 2

  val tfPNew = new TextField(50)
  println("os.name=" + System.getProperty("os.name"))
  if (System.getProperty("os.name").toLowerCase.contains("windows")) {
    tfPNew.editable = false
  } else {
    tfPNew.editable = true //
    // Pb with Ubuntu Permit to fill the txtxField  
  }

  gbp.layout += ((tfPNew -> gbc))

  // Date et Debut du test
  insets1 = new Insets(0, 10, 0, 10)
  gbc.insets = insets1
  val lBeginDate = new Label("Begin Date")
  val lEndDate = new Label("End Date")
  lBeginDate.font = font2
  lEndDate.font = font2
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 0
  gbc.gridy = 3
  gbp.layout += ((lBeginDate -> gbc))
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 1
  gbc.gridy = 3
  gbp.layout += ((lEndDate -> gbc))

  val lFormatBeginDate = new Label("yyyy/MM/dd HH:mm:ss")
  val lFormatEndDate = new Label("yyyy/MM/dd HH:mm:ss")
  lFormatBeginDate.font = font2
  lFormatEndDate.font = font2
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 0
  gbc.gridy = 4
  gbp.layout += ((lFormatBeginDate -> gbc))
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 1
  gbc.gridy = 4
  gbp.layout += ((lFormatEndDate -> gbc))

  val df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
  val cal = Calendar.getInstance
  //  

  val tfBeginDate = new TextField(50)

  tfBeginDate.font = font1
  tfBeginDate.editable = true
  val tfEndDate = new TextField(50)

  tfEndDate.font = font1
  tfEndDate.editable = true
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 0
  gbc.gridy = 5
  gbc.fill = GridBagPanel.Fill.Horizontal
  gbp.layout += ((tfBeginDate -> gbc))
  gbc.gridx = 1
  gbc.gridy = 5
  gbp.layout += ((tfEndDate -> gbc))

  // Button Cancel / OK
  val bOK = new Button("OK")
  val dimBut = new Dimension(80, 30)
  bOK.maximumSize = dimBut
  bOK.minimumSize = dimBut
  bOK.preferredSize = dimBut
  bOK.maximumSize = dimBut
  gbc.fill = GridBagPanel.Fill.None
  gbc.gridx = 0
  gbc.gridy = 6
  gbp.layout += ((bOK -> gbc))
  insets1 = new Insets(10, 10, 10, 10)
  val bCancel = new Button("Cancel")
  bCancel.maximumSize = dimBut
  bCancel.minimumSize = dimBut
  bCancel.preferredSize = dimBut
  bCancel.maximumSize = dimBut
  gbc.weightx = 0
  gbc.gridx = 1
  gbc.gridy = 6
  gbp.layout += ((bCancel -> gbc))

  this.contents = gbp
  var screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize()
  location = new Point((screenSize.width - size.width) / 2, (screenSize.height - size.height) / 2)
  if (!System.getProperty("os.name").toLowerCase.contains("windows")) {
    this.tfPNew.peer.addMouseListener(new MouseAdapter(){
      
     override def mouseExited( e:MouseEvent) {
       var dir = SearchDirFile.searchYoungestDir(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject, ("""^""" + SwingScaViewer.tmpProps.getProperty("scaviewer.prefixscenario")).r)
      if (!new File(dir + File.separator + "testDate.properties").exists) {

        tfBeginDate.text = "1970/01/01 00:00:00"
        tfEndDate.text = "2050/01/01 00:00:00"
        val propsDate = new Properties()
        propsDate.put("beginTestDate", tfBeginDate.text)
        propsDate.put("endTestDate", tfEndDate.text)
        var fos = new FileOutputStream(new File(dir + File.separator + "testDate.properties"))
        propsDate.store(fos, "Saved " + new Date().toString)
        fos.close

      } else {
        val propsDate = new Properties()
        propsDate.load(new FileInputStream(new File(dir + File.separator + "testDate.properties")))
        val sdfDateTest = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
        (sdfDateTest.parse(propsDate.getProperty("beginTestDate")).getTime(), sdfDateTest.parse(propsDate.getProperty("endTestDate")).getTime())
      }
     }

      
    })
  }
  this.resizable = true
  listenTo(cbxEx.selection)
  reactions += {

    case SelectionChanged(`cbxEx`) =>
      if (!System.getProperty("os.name").toLowerCase.contains("windows")) {
        this.tfPNew.editable = true

      }
      else
      {
        println("cbxEx :selection changed")
        this.tfPNew.editable = true
      this.tfPNew.text = cbxEx.selection.item
      this.tfPNew.editable = false
      // recherche du dernier repertoire de test :
      var dir = SearchDirFile.searchYoungestDir(System.getProperty("workspace") + File.separator +  this.tfPNew.text, ("""^""" + SwingScaViewer.tmpProps.getProperty("scaviewer.prefixscenario")).r)
      if (!new File(dir + File.separator + "testDate.properties").exists) {

        this.tfBeginDate.text = "1970/01/01 00:00:00"
        this.tfEndDate.text = "2050/01/01 00:00:00"
        val propsDate = new Properties()
        propsDate.put("beginTestDate", this.tfBeginDate.text)
        propsDate.put("endTestDate", this.tfEndDate.text)
        var fos = new FileOutputStream(new File(dir + File.separator + "testDate.properties"))
        propsDate.store(fos, "Saved " + new Date().toString)
        fos.close

      } else {
        val propsDate = new Properties()
        propsDate.load(new FileInputStream(new File(dir + File.separator + "testDate.properties")))
        val sdfDateTest = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
        this.tfBeginDate.text = propsDate.getProperty("beginTestDate")
        this.tfEndDate.text = propsDate.getProperty("endTestDate")
        
      }
      if (System.getProperty("os.name").toLowerCase.contains("windows")) {
        tfPNew.editable = false
      }
      }
  }

  bOK.reactions += {

    case ActionEvent(`bOK`) =>
      if (tfPNew.text.length() > 0) {
        SwingScaViewer.currentProject = tfPNew.text
        win.title = SwingScaViewer.initialTitle

        win.title += " current Project = " + tfPNew.text
        if (!new File(System.getProperty("workspace") + File.separator +
          SwingScaViewer.currentProject + File.separator + "myCommands").exists()) {
          new File(System.getProperty("workspace") + File.separator +
            SwingScaViewer.currentProject + File.separator + "myCommands").mkdir
        }
        if (!new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
          File.separator + "myCommands" + File.separator + "Windows").exists) {
          new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
            File.separator + "myCommands" + File.separator + "Windows").mkdir
        }
        if (!new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
          File.separator + "myCommands" + File.separator + "unix").exists) {
          new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
            File.separator + "myCommands" + File.separator + "unix").mkdir
        }

        // Vidage locale et general myCommands et recuperation de l os
        var dirLocMyCommands = new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
          File.separator + "myCommands")

        dirLocMyCommands.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach (_.delete())

        var dirGenMyCommands = new File(System.getProperty("root") + File.separator +
          File.separator + "myCommands")

        dirGenMyCommands.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach (_.delete())

        // copy Os dependantes
        System.getProperty("os.name").toLowerCase().contains("window") match {
          case true =>
            {
              val dirLocWindows = new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
                File.separator + "myCommands" + File.separator + "Windows")
              dirLocWindows.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach { f =>
                CopyFile.copy(f, new File(dirLocMyCommands + File.separator + f.getName))
              }
              val dirGenWindows = new File(dirGenMyCommands + File.separator + "Windows")
              dirGenWindows.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach { f =>
                CopyFile.copy(f, new File(dirGenMyCommands + File.separator + f.getName))
              }
            }
          case _ =>
            {

              val dirLocUnix = new File(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject +
                File.separator + "myCommands" + File.separator + "unix")
              dirLocUnix.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach { f =>
                CopyFile.copy(f, new File(dirLocMyCommands + File.separator + f.getName))
              }
              val dirGenUnix = new File(dirGenMyCommands + File.separator + "unix")
              dirGenUnix.listFiles filter (_ isFile) filter (_.getAbsolutePath().endsWith(".properties")) foreach { f =>
                CopyFile.copy(f, new File(dirGenMyCommands + File.separator + f.getName))
              }

            }
        }

        var dir = SearchDirFile.searchYoungestDir(System.getProperty("workspace") + File.separator + SwingScaViewer.currentProject, ("""^""" + SwingScaViewer.tmpProps.getProperty("scaviewer.prefixscenario")).r)

        val propsDate = new Properties()
        propsDate.put("beginTestDate", this.tfBeginDate.text)
        propsDate.put("endTestDate", this.tfEndDate.text)
        var fos = new FileOutputStream(new File(dir + File.separator + "testDate.properties"))
        propsDate.store(fos, "Saved " + new Date().toString)
        fos.close
        dispose
      }
  }
  bCancel.reactions += {

    case ActionEvent(`bCancel`) =>

      dispose

  }
  visible = true
  pack

  repaint

}